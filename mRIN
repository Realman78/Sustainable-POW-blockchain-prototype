Help me in creating a sustainable mining practice starting with bitcoin. For the proof of concept, I just need to replace the mining function with something that "could be useful". For example, I want to replace the mining function (nonce guessing) with factorizing the number 8888888
The mining code in the bitcoin repo is this:
static bool GenerateBlock(ChainstateManager& chainman, CBlock&& block, uint64_t& max_tries, std::shared_ptr<const CBlock>& block_out, bool process_new_block)
{
    block_out.reset();
    block.hashMerkleRoot = BlockMerkleRoot(block);

    while (max_tries > 0 && block.nNonce < std::numeric_limits<uint32_t>::max() && !CheckProofOfWork(block.GetHash(), block.nBits, chainman.GetConsensus()) && !chainman.m_interrupt) {
        ++block.nNonce; // Replace this with factorizing the number
        --max_tries;
    }
    if (max_tries == 0 || chainman.m_interrupt) {
        return false;
    }
    if (block.nNonce == std::numeric_limits<uint32_t>::max()) {
        return true;
    }

   ....

Also, other nodes need to verify that result. Just as they currently verify the new block, they need to verify the mining function by multiplying the result of the factorization. Which file is that and can you help me change that too?

m9as8K&aam2!!